# -*- coding: utf-8 -*-
"""idmc-idus-gidd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m0o5exqZxo9sAhZFUzBWcCyBLmZEMxfo
"""

import requests

r = requests.get("https://droughtwatch.icpac.net/eadw-api/settings/admin-boundary/")
resp = r.json()
states = [state['code'] for state in resp]
clientID = 'ICPACAUG10'
states

import requests
import pandas as pd
import geopandas as gpd



r = requests.get(f"https://helix-tools-api.idmcdb.org/external-api/idus/all/?client_id={clientID}")
if r.status_code != 200:
    r.raise_for_status()

idus_df = pd.DataFrame(data=r.json())
igad_data = idus_df.query('iso3 in @states').assign(
    geom = lambda x: gpd.points_from_xy(x.longitude, x.latitude, crs="EPSG:4326")
).set_geometry('geom')
igad_data.head()

igad_data['iso3'].unique().tolist()

# from sqlalchemy import create_engine
# from sqlalchemy.engine import URL
# from mukau.settings import Settings

# def get_external_db_engine(port: int, host: str | None = '197.254.13.230'):
#     settings = Settings()

#     db_str = URL.create(
#         drivername=settings.driver_name,
#         host=host,
#         port=port,
#         password=settings.db_password,
#         username=settings.db_user,
#         database=settings.db_name,
#     )
#     return create_engine(db_str, echo=False)


# conn2 = get_external_db_engine(port=6752)
# conn2

# conn4 = get_external_db_engine(port=6754)
# conn4

import pandas as pd
import geopandas as gpd

idus_df = pd.DataFrame(data=data)
igad_data = idus_df.query('iso3 in @states').drop(
    columns=['country','iso3','centroid','old_id']
).assign(
    geom = lambda x: gpd.points_from_xy(x.longitude, x.latitude, crs="EPSG:4326")
).set_geometry('geom').rename(
    columns={'figure':'total_displaced'}
)
igad_data.head()

admin = gpd.read_postgis(
    con=conn2,
    sql='SELECT gid_0, gid_1, gid_2, geom FROM thematic.gadm4_admin_level2_boundaries'
)
join = gpd.sjoin(admin, igad_data, predicate='contains').drop(columns=['index_right','geom'])
join.head()

# import math
# from datetime import datetime
# from pangres import upsert
# from tqdm import tqdm
# from sqlalchemy import Engine

# def insert_upsert(
#         conn: Engine,
#         df: gpd.GeoDataFrame,
#         table_name: str,
#         schema: str,
#         index_cols: list[str],
#         if_row_exists: str | None = "update",
#         chunksize: int | None = 20000,
#     ):
#         print(f"Executing insert/update into {schema}.{table_name}")
#         df = df.assign(updated_when=datetime.now()).set_index(index_cols)
#         iterator = upsert(
#             con=conn,
#             df=df,
#             table_name=table_name,
#             schema=schema,
#             if_row_exists=if_row_exists,
#             chunksize=chunksize,
#             yield_chunks=True,
#         )
#         iterations = math.ceil(len(df) / chunksize)
#         for _ in tqdm(
#             iterator,
#             desc=f"Upsert into {schema}.{table_name}",
#             total=iterations,
#             unit="chunk",
#         ):
#             pass


# # insert_upsert(df=join, conn=conn4, table_name='idmc_idus_disasters', schema='displacement', index_cols=['id'], chunksize=1000)

def make_get_request(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        r.raise_for_status()
    return r.json()


r = requests.get("https://helix-tools-api.idmcdb.org/external-api/gidd/disasters/", params={'iso3__in': ','.join(states),'client_id':clientID})

disasters, final_page, next_page = r.json()['results'], False, r.json()['next']

while not final_page:
    resp = make_get_request(next_page)
    disasters = disasters + resp['results']
    next_page = resp['next']
    if not next_page:
        final_page = True

index_cols = ['gid_0', 'start_date', 'end_date', 'new_displacement', 'event_name', 'hazard_type_name']

df = pd.DataFrame(data=disasters).sort_values(by='new_displacement', ascending=False).drop_duplicates(subset=index_cols, keep='first').drop(
    columns=['country_name','glide_numbers','hazard_category','hazard_sub_category','hazard_type','hazard_sub_type']
).rename(columns={'iso3':'gid_0'})
df.head()

# insert_upsert(df=df, conn=conn2, table_name='idmc_gidd_disasters', schema='displacement', index_cols=index_cols, chunksize=1000)

