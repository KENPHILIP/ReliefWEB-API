# -*- coding: utf-8 -*-
"""DTM_DATA_EXTRACTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WCR4kbBItDF2XEegWMdUtlM2pfYOb1Te

The script automates the retrieval and organization of DTM (Displacement Tracking Matrix) datasets from the IOM (International Organization for Migration) API for countries in East and Horn of Africa associated specifically for ICPAC regions (Intergovernmental Authority on Development Climate Prediction and Applications Centre). It begins by defining necessary imports and setting up endpoint URLs, country lists, and dataset components. The main functionality includes two primary functions: `download_country_datasets` and `display_file_titles`.

- `download_country_datasets` downloads datasets for specified countries and year ranges, constructing URLs tailored to each country and including specified dataset components. It makes GET requests to fetch the data and saves each dataset as an Excel file in a structured directory (`./DTM_IOM_datasets/{country}`). Error handling ensures reliability during data retrieval.

- `display_file_titles` reads and displays the sheet titles of downloaded Excel files for a given country, utilizing `openpyxl` for file manipulation. It handles exceptions gracefully in case of reading errors.

The `main` function coordinates the entire process by creating a main folder (`./DTM_IOM_datasets`) to store all downloaded data. It iterates through each country in the defined list (`east_horn_africa_countries`), calling `download_country_datasets` to fetch datasets and `display_file_titles` to show their details.
"""

import os
import requests
import urllib.parse
import openpyxl
import pandas as pd

# Define the endpoint URL
endpoint_url = "https://dtm.iom.int/data-and-analysis/dtm-api"

# List of East and Horn of Africa countries in ICPAC
east_horn_africa_countries = [
    "Burundi", "Djibouti", "Eritrea", "Ethiopia", "Kenya",
    "Rwanda", "Somalia", "South Sudan", "Sudan", "Tanzania", "Uganda"
]

# Dataset components to include
components = [
    "Mobility Tracking", "Event Tracking", "Village Assessment",
    "Survey", "Community Perceptions", "Displacement Solutions",
    "Site Assessment", "Baseline Assessment"
]

# Function to download and save datasets for a given country and year range as Excel
def download_country_datasets(country, start_year=2000, end_year=2024):
    # Create directory for country if it doesn't exist
    country_folder = f"./DTM_IOM_datasets/{country}"
    os.makedirs(country_folder, exist_ok=True)

    for year in range(start_year, end_year + 1):
        # Construct URL for the specific country's dataset and year
        country_url = f"{endpoint_url}?country={urllib.parse.quote(country)}&dataset_type=info_sheet&regional_dataset=all&year={year}"

        # Add components to the URL
        for component in components:
            country_url += f"&components[]={urllib.parse.quote(component)}"

        # Make a GET request to fetch the data
        response = requests.get(country_url)

        # Check if request was successful
        if response.status_code == 200:
            # Save the dataset to an Excel file
            filename = f"{country}_DTM_data_{year}.xlsx"
            filepath = os.path.join(country_folder, filename)

            # Write content to Excel file
            with open(filepath, 'wb') as f:
                f.write(response.content)

            print(f"Datasets for {country} in {year} downloaded and saved.")
        else:
            print(f"Failed to retrieve datasets for {country} in {year}. Status code: {response.status_code}")

# Function to read and display titles of the downloaded files for a given country
def display_file_titles(country):
    country_folder = f"./DTM_IOM_datasets/{country}"
    if os.path.exists(country_folder):
        for filename in os.listdir(country_folder):
            if filename.endswith('.xlsx'):
                filepath = os.path.join(country_folder, filename)
                try:
                    workbook = openpyxl.load_workbook(filepath)
                    sheet_titles = workbook.sheetnames
                    print(f"{filename}: {sheet_titles}")
                except Exception as e:
                    print(f"Failed to read {filename}: {e}")
    else:
        print(f"No datasets found for {country}.")

# Main loop to download datasets for all East and Horn of Africa countries and all years
def main():
    # Create a main folder for all datasets
    os.makedirs("./DTM_IOM_datasets", exist_ok=True)

    for country in east_horn_africa_countries:
        download_country_datasets(country)
        display_file_titles(country)

if __name__ == "__main__":
    main()